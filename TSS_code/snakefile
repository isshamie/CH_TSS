from tss.data.Homer import merge_peaks
import os
import glob

#PARAMS = "parameters/{sample}.txt"
#configfile: "config.yaml"

configfile: "parameters/params.yaml"
print("config",config)
#input_files, output_file, dist='given', type_merge='')

raw = config["raw_folder"]
results = config['results']
os.chdir(results)


rule all:
    input:
        expand("data/processed/{anno}/nucleotides/nucleotide.png",
               "data/processed/{anno}/output/promoter_TSS.bed",
               "data/processed/{anno}/output/TSS_mRNA.expression.tsv",
               "data/processed/{anno}/barplot/TSS_mRNA.barplot.png",
               "data/processed/{anno}/rna_cumulative_plot/tss.png",
               experiment_name=config["annotation"])


#sample=config["samples"]),
#expand("{raw_f}.bam.bai", raw_f=RAW_SAMPLES),

# Recreate genome start site
# peaks_break_into_files (has logExpression)
# peaks_to_annotation.ipynb
# Merge_into_tissues (2nd half of it only)
# retrieve_tss_peaks
# Rerun Figures2
# Separate peaks based on expression [not done]
# Rerun create_output
# Figure1
# Rerun Figure3
# Tag Histograms Compare Experimental to RefSeq
# Nucleotide Frequency
# RerunÂ  CDF of TSS with Samples.ipynb
# Compare RNA_seq

#"/data/isshamie/TSS/Analysis/Analysis_NCBI_PICR/f04_peaks/"

rule process_genome:
    input:
        anno = config["annotation"],
        is_gff = config["is_gff"]
    output:
        mRNA_peak = "data/processed/genome/{anno}/mRNA.peak"

rule merge_peaks:
    input: config["peaks_dir"]
    output:
        "data/processed/merged/{sample}.merge"
    run:
        #out = os.path.join(config["DATA_PROCESSED_DIR"],output[0])
        print("out", output[0])
        print("in", input[0])
        merge_peaks(glob.glob(input[0]+"*"), output[0], dist='given',
        type_merge='')

rule merge_tags:
   input: config["sample"]
   output:
       "data/{sample}.fa"
   conda:
       "environment.yaml"
   shell:
       "python coevolve/get_fasta.py {input} {output}"


# transform peaks
rule peaks_to_expression:
    input:
        samples_merge = "data/processed/merged/{sample}.merge",
        initial_peaks_dir = config["peaks_dir"],
        meta_samples = config['metaSamples']
    output:
        expression_f = "data/processed/all_peaks/peaks_expression.tsv"

# Create expression matrix
rule peaks_to_annotation:
    input:
         samples_merge = "data/processed/merged/{sample}.merge",
         annotation = "data/processed/{anno}"

    output:
          "data/processed/peak_small_files/samples.merge.anno"


rule gene_centric_tss:
    input:
         peaks_anno = "data/processed/peak_small_files/samples.merge.anno",
         genome =  config["ref_fa"],
         annotation = config["annotation"]
    output:
        "data/processed/gene_centric_tss/gene_df_{bp_l}_{bp_r}"
    shell:


rule split_by_samples:

rule create_output:
    input:
        mRNA_peak = "data/processed/genome/{anno}/mRNA.peak",
        txn_df =  "data/processed/gene_centric_tss/txn_df_{bp_l}_{bp_r}",
        atac_bed =  config["atac"]
    output:
          "data/processed/eTSS/TSS_{bp_l}_{bp_r}.bed",
          "data/processed/TSS_{bp_l}_{bp_r}.meta",
          refseq_center =  "data/processed/eTSS_refseq_center/TSS_{bp_l}_{bp_r}.bed",

rule barplot:
    input:
        meta_samples = config['metaSamples'],
        meta_eTSS =  "data/processed/eTSS/TSS_{bp_l}_{bp_r}.meta",
        bed_eTSS =  "data/processed/eTSS/TSS_{bp_l}_{bp_r}.bed"
    output:
          "figures/barplots/eTSS/tissues"

rule nucleotides:
    input:
        meta_eTSS =  "data/processed/eTSS/TSS_{bp_l}_{bp_r}.meta",
        bed_eTSS =  "data/processed/eTSS/TSS_{bp_l}_{bp_r}.bed",
        refseq_center =  "data/processed/eTSS_refseq_center/TSS_{bp_l}_{bp_r}.bed",

    output:
        "figures/nucleotides/eTSS_nucleotide.png"


rule motifs:
    input:
        meta_eTSS =  "data/processed/eTSS/TSS_{bp_l}_{bp_r}.meta",
        bed_eTSS =  "data/processed/eTSS/TSS_{bp_l}_{bp_r}.bed",
        refseq_center =  "data/processed/eTSS_refseq_center/TSS_{bp_l}_{bp_r}.bed",
    output:
        "figures/motifs/eTSS_inr_tata.png"


rule cumulative_rna:
    input:
        meta_eTSS =  "data/processed/eTSS/TSS_{bp_l}_{bp_r}.meta",
        bed_eTSS =  "data/processed/eTSS/TSS_{bp_l}_{bp_r}.bed",
    output:
          "figures/cumulativePlot/venn_diagram"

